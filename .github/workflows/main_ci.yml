name: Main CI

on:
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/main_ci.yml'
      - 'cmake/**'
      - 'examples/**'
      - 'include/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'codecov.yml'
      - 'vcpkg.json'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  BUILD_TYPE: Debug
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg-cache

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [ gcc ]
        include:
          - config: gcc
            version: '10'

    steps:
      - uses: actions/checkout@v2
        with:
          path: bsa

      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.version }}

      - name: Setup Environment
        run: |
          echo "GCOV=gcov-${{ matrix.version }}" >> $GITHUB_ENV

          wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
          unzip ninja-linux.zip
          sudo mv ninja /usr/local/bin

          sudo apt install liblz4-dev zlib1g-dev -y
          sudo pip install gcovr

      - name: Download binary_io
        uses: actions/checkout@v2
        with:
          ref: '2.0.1'
          repository: Ryan-rsm-McKenzie/binary_io
          path: binary_io

      - name: Install binary_io
        working-directory: ${{ github.workspace }}/binary_io
        run: |
          cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_TESTING=OFF
          cmake --build build
          sudo cmake --install build

      - name: Download Catch2
        uses: actions/checkout@v2
        with:
          ref: v2.13.7
          repository: catchorg/Catch2
          path: catch2

      - name: Install Catch2
        working-directory: ${{ github.workspace }}/catch2
        run: |
          cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCATCH_BUILD_TESTING=OFF -DCATCH_ENABLE_WERROR=OFF -DCATCH_INSTALL_DOCS=OFF
          cmake --build build
          sudo cmake --install build

      - name: Download mmio
        uses: actions/checkout@v2
        with:
          ref: '1.1.0'
          repository: Ryan-rsm-McKenzie/mmio
          path: mmio

      - name: Install mmio
        working-directory: ${{ github.workspace }}/mmio
        run: |
          cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_TESTING=OFF
          cmake --build build
          sudo cmake --install build

      - name: Configure CMake
        working-directory: ${{ github.workspace }}/bsa
        run: cmake --preset ninja-linux-apt -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        working-directory: ${{ github.workspace }}/bsa
        run: cmake --build build

      - name: Test
        working-directory: ${{ github.workspace }}/bsa/build
        env:
          gcovr: gcovr -r .. . --coveralls --exclude-unreachable-branches --exclude-function-lines --exclude-throw-branches
        run: |
          (cd tests && ./tests [src])
          ${{ env.gcovr }} -f ".*/src/bsa/.*" -f ".*/include/bsa/.*" -o src.json

          find -type f -name *.gcda | xargs rm

          (cd tests && ./tests [examples])
          ${{ env.gcovr }} -f ".*/examples/.*" -o examples.json

      - name: Collect code coverage
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: bsa/build/examples.json,bsa/build/src.json
          verbose: true

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: bsa

      - name: Set up MSVC
        uses: egor-tensin/vs-shell@v2

      - name: Setup vcpkg
        run: |
          mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          cd $env:VCPKG_INSTALLATION_ROOT
          ./bootstrap-vcpkg.bat
          ./vcpkg --version > ${{ github.workspace }}/vcpkg-version.txt

      - name: Cache vcpkg
        uses: actions/cache@v2
        id: vcpkg-cache
        env:
          cache-name: vcpkg-cache
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('bsa/**/vcpkg.json', 'vcpkg-version.txt') }}

      - name: Configure CMake
        working-directory: ${{ github.workspace }}/bsa
        run: cmake --preset ninja-windows-vcpkg -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        working-directory: ${{ github.workspace }}/bsa
        run: cmake --build build

      - name: Test
        working-directory: ${{ github.workspace }}/bsa/build
        run: ctest -C ${{ env.BUILD_TYPE }} -V
