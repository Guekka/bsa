name: Main CI

on:
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/main_ci.yml'
      - 'cmake/**'
      - 'include/**'
      - 'scripts/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'vcpkg.json'
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Debug
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg-archives

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        include:
          - os: ubuntu-latest
            cmake-generator: ninja
            cmake-platform: linux
            env-access: '$'
            setup: bash scripts/setup.sh
            shell-extension: sh
          - os: windows-latest
            cmake-generator: vs2019
            cmake-platform: windows
            env-access: '$env:'
            setup: '' # nothing right now
            shell-extension: bat

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Run setup script
        run: ${{ matrix.setup }}

      - name: Setup vcpkg
        run: |
          mkdir ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          cd ${{ matrix.env-access }}VCPKG_INSTALLATION_ROOT
          ./bootstrap-vcpkg.${{ matrix.shell-extension }}
          ./vcpkg --version > ${{ github.workspace }}/vcpkg-version

      - name: Cache vcpkg archives
        uses: actions/cache@v2
        env:
          cache-name: vcpkg-cache
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/vcpkg.json', 'vcpkg-version') }}

      - name: Configure CMake
        env:
          CC: gcc-10
          CXX: g++-10
        run: cmake --preset ${{ matrix.cmake-generator }}-${{ matrix.cmake-platform }}-vcpkg -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBSA_BUILD_DOCS=OFF

      - name: Build
        run: cmake --build ${{ github.workspace }}/build

      - name: Test
        working-directory: ${{ github.workspace }}/build
        run: ctest -C ${{ env.BUILD_TYPE }} -V

      - name: Set CI badge values
        run: |
          echo "BADGE_COLOR=success" >> $GITHUB_ENV
          echo "BADGE_MESSAGE=passing" >> $GITHUB_ENV

  update_badges:
    if: ${{ always() }}
    name: Update CI badges
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set CI badge values
        if: ${{ failure() }}
        run: |
          echo "BADGE_COLOR=critical" >> $GITHUB_ENV
          echo "BADGE_MESSAGE=failing" >> $GITHUB_ENV

      - name: Update CI badge
        if: ${{ always() }}
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.MAIN_CI_GIST }}
          gistID: 634174b328f6d356cf369bd94b3ecad6
          filename: bsa-main-ci.json
          color: ${{ env.BADGE_COLOR }}
        label: build
        message: ${{ env.BADGE_MESSAGE }}
        namedLogo: github
        style: flat
