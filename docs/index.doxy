/*!

\mainpage bsa
\image html banner_small.png width=1280px
\tableofcontents

\section overview Overview

\subsection what What is a BSA?
The Bethesda archive file is a proprietary format used to store game files for the [The Elder Scrolls](https://en.wikipedia.org/wiki/The_Elder_Scrolls) and [Fallout](https://en.wikipedia.org/wiki/Fallout_(series)) series of games beginning with the [The Elder Scrolls III](https://en.wikipedia.org/wiki/The_Elder_Scrolls_III:_Morrowind). This format is essentially a zip file which stores some extra meta information to be used with their internal virtual filesystem. There are many tools that can be used to work with these files, but most are written as user facing applications, without the intention to be used as a _library_. `bsa` intends to provide a low-ish level interface for C++ programmers to work with the format.

\subsection why Why bsa?

\subsubsection why-cxx It's written in contemporary C++
Nope, it's not written in C#, Pascal, or Python. It's all native, with contemporary C++ features in mind. `bsa` provides interfaces that \ref bsa::components::hashmap "model standard containers", so that programmers intuitively understand how to work with its interface without needing to dive into the documentation.

\subsubsection why-testing It's actively tested
The [testsuite](https://github.com/Ryan-rsm-McKenzie/bsa/tree/master/tests) covers a wide range of features, ensuring that `bsa` handles archives accurately, and that bugs never regress.

\subsubsection why-low-overhead It's low overhead
`bsa` primarily stores no-copy views into file data/strings so that objects are cheap to copy and the resulting memory overhead is low. However, `bsa` can also take ownership of data, as a convenience.

\subsubsection why-low-level It's low level
`bsa` provides \ref bsa::tes4::file::decompress_into() "low level interfaces" into the underlying data, so that programmers who feel they can "do it better" don't feel burdened by arbitrary restrictions. This does not mean that there aren't high level interfaces, it simply means that `bsa` will step out of your way when appropriate.

\section examples Examples

\subsection examples-reading Reading
\cpp
#include <bsa/tes4.hpp>
#include <cstdio>
#include <filesystem>

int main()
{
	std::filesystem::path oblivion{ "path/to/oblivion" };
	bsa::tes4::archive bsa;
	bsa.read(oblivion / "Data/Oblivion - Voices2.bsa");
	const auto file = bsa["sound/voice/oblivion.esm/imperial/m"]["testtoddquest_testtoddhappy_00027fa2_1.mp3"];
	if (file) {
		const auto bytes = file->as_bytes();
		const auto out = std::fopen("happy.mp3", "wb");
		std::fwrite(bytes.data(), 1, bytes.size_bytes(), out);
		std::fclose(out);
	}
}
\ecpp

\subsection examples-writing Writing
\cpp
#include <bsa/tes4.hpp>
#include <cstddef>
#include <utility>

int main()
{
	const char payload[] = { "Hello world!\n" };
	bsa::tes4::file f;
	f.set_data({ reinterpret_cast<const std::byte*>(payload), sizeof(payload) - 1 });

	bsa::tes4::directory d;
	d.insert("hello.txt", std::move(f));

	bsa::tes4::archive archive;
	archive.insert("misc", std::move(d));
	archive.archive_flags(bsa::tes4::archive_flag::file_strings | bsa::tes4::archive_flag::directory_strings);
	archive.archive_types(bsa::tes4::archive_type::misc);

	archive.write("example.bsa", bsa::tes4::version::sse);
}
\ecpp

\section cmake-options CMake Options

| Option | Default Value | Description |
| --- | --- | --- |
| `BSA_BUILD_DOCS` | `OFF` ❌ | Set to `ON` to build the documentation. |
| `BSA_BUILD_EXAMPLES` | `OFF` ❌ | Set to `ON` to build the examples. |
| `BSA_BUILD_SRC` | `ON` ✔️ | Set to `ON` to build the main library. |
| `BSA_SUPPORT_XMEM` | `OFF` ❌ | Set to `ON` to build support for the xmem codec proxy. |
| `BUILD_TESTING` | `ON` ✔️ | Set to `ON` to build the tests. See also the CMake [documentation](https://cmake.org/cmake/help/latest/module/CTest.html) for this option. |

\section integration Integration

`bsa` uses [CMake](https://cmake.org/) as its primary build system. Assuming that `bsa` and its dependencies have been installed to a place where CMake can find it, then using it in your project is as simple as:

	find_package(bsa REQUIRED CONFIG)
	target_link_libraries(${PROJECT_NAME} PUBLIC bsa::bsa)

\section xmem-codec XMem Codec

The xmem codec is a compression format available as part of the xbox development kit (XDK). This compression format is utilized only in TESV. `archive.exe` for TESV:SSE has this compression flag available, however it is unimplemented, and the game will simply use LZ4 instead. Support for this format is very difficult due to its proprietary nature, however there exists an implementation of the format as part of the XNA framework, which is freely available, albeit as a 32-bit binary. Thus, Support for this format only available on Windows, and requires users to opt into it via the `BSA_SUPPORT_XMEM` cmake option. Additionally, users must build the xmem support proxy separately, and bundle the resulting binary with their own.

\section important-notes Important Notes

- If the `hash` of one `file` compares equal to the `hash` of another `file`, then they _are_ equal. It doesn't matter if they have different file names, or if they store different data blobs. The game engine uniquely identifies `file`'s based on their `hash` alone.
- UTF-8 inputs are not well formed. The game engine has a crippling bug where extended ascii characters can index out-of-bounds, producing unreproducible hashes. It is the user's job to ensure they aren't attempting to store paths which contain such characters. The game engine will accept them, but it will never be able to reproducibly locate them.
- The game engine normalizes paths to use the `\` character instead of the standard `/`. As such, users should be aware that file paths retrieved from the virtual file system may not constitute valid paths on their native file system.
- Avoid writing file paths which are close to the limit of `MAX_PATH`. Bethesda uses fixed buffers everywhere with no input validation, so they will most likely crash the game.
- Make sure to lexically normalize your paths before you pass them. Bethesda uses *really* basic path splitting methods, and `bsa` replicates them.
- Files can not be split into more than 4 chunks inside a ba2. Bethesda uses a fixed buffer to store the chunks, and exceeding that limit will likely crash the game.

\section dependencies Dependencies

\subsection dependencies-consumption Consumption
- [binary_io](https://github.com/Ryan-rsm-McKenzie/binary_io)
- [DirectXTex](https://github.com/microsoft/DirectXTex) (windows only)
- [LZ4](https://github.com/lz4/lz4)
- [mmio](https://github.com/Ryan-rsm-McKenzie/mmio)
- [zlib](https://github.com/madler/zlib)

\subsection dependencies-xmem XMem Codec Support
- [args](https://github.com/Taywee/args)
- [expected lite](https://github.com/martinmoene/expected-lite)
- [reproc](https://github.com/DaanDeMeyer/reproc)
- [Xbyak](https://github.com/herumi/xbyak)

\subsection dependencies-development Development
- [Catch2](https://github.com/catchorg/Catch2)
- [poxy](https://github.com/marzer/poxy)

\section alternatives Alternatives

- C#
	- [BSA Browser](https://github.com/AlexxEG/BSA_Browser)
	- [Oblivion Mod Manager](https://www.nexusmods.com/oblivion/mods/2097)
	- [Wabbajack](https://github.com/wabbajack-tools/wabbajack)
- C++
	- [Bethesda Archive Extractor](https://www.nexusmods.com/skyrimspecialedition/mods/974) (no source)
	- [BSAopt](https://github.com/Ethatron/bsaopt)
	- [BSAPACK](https://web.archive.org/web/20071010081047/http://www34.brinkster.com:80/ghostwheel/)
	- [Cathedral Assets Optimizer](https://gitlab.com/G_ka/Cathedral_Assets_Optimizer)
	- [DDSopt](https://github.com/Ethatron/ddsopt)
	- [Fallout 4 Tools](https://f4se.silverlock.org/)
	- [Libbsa](https://github.com/Ortham/libbsa)
	- [Mod Organizer 2](https://github.com/ModOrganizer2/modorganizer-bsatk)
- Java
	- [FO3 Archive Utility](https://www.nexusmods.com/fallout3/mods/34) (no source)
- Pascal
	- [BSArch](https://github.com/TES5Edit/TES5Edit)
- Python
	- [Bethesda Structs](https://github.com/stephen-bunn/bethesda-structs)
	- [Wrye Bash](https://github.com/wrye-bash/wrye-bash)
- Unknown
	- [BSA Commander](https://www.nexusmods.com/oblivion/mods/3311) (no source)
	- [BSA Unpacker](https://www.nexusmods.com/skyrim/mods/4804/) (no source)
	- [TES4BSA](https://web.archive.org/web/20071010081047/http://www34.brinkster.com:80/ghostwheel/) (no source)

*/
