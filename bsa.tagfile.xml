<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.8" doxygen_gitid="c2fe5c3e4986974eb2a97608b24086683502f07f">
  <compound kind="file">
    <name>index.doxy</name>
    <filename>index_8doxy.html</filename>
  </compound>
  <compound kind="file">
    <name>bsa.hpp</name>
    <filename>bsa_8hpp.html</filename>
    <includes id="fo4_8hpp" name="fo4.hpp" local="yes" import="no" module="no" objc="no">fo4.hpp</includes>
    <includes id="tes3_8hpp" name="tes3.hpp" local="yes" import="no" module="no" objc="no">tes3.hpp</includes>
    <includes id="tes4_8hpp" name="tes4.hpp" local="yes" import="no" module="no" objc="no">tes4.hpp</includes>
  </compound>
  <compound kind="file">
    <name>common.hpp</name>
    <filename>common_8hpp.html</filename>
    <includes id="fwd_8hpp" name="fwd.hpp" local="yes" import="no" module="no" objc="no">bsa/fwd.hpp</includes>
    <class kind="struct">bsa::doxygen_detail</class>
    <class kind="class">bsa::exception</class>
    <class kind="class">bsa::compression_error</class>
    <class kind="class">bsa::read_source</class>
    <class kind="class">bsa::write_sink</class>
    <class kind="class">bsa::components::basic_byte_container</class>
    <class kind="class">bsa::components::byte_container</class>
    <class kind="class">bsa::components::compressed_byte_container</class>
    <class kind="class">bsa::components::hashmap</class>
    <class kind="class">bsa::components::hashmap::index_t</class>
    <class kind="class">bsa::components::key</class>
    <namespace>bsa</namespace>
    <namespace>bsa::concepts</namespace>
    <namespace>bsa::components</namespace>
    <concept>bsa::concepts::stringable</concept>
  </compound>
  <compound kind="file">
    <name>fo4.hpp</name>
    <filename>fo4_8hpp.html</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">bsa/detail/common.hpp</includes>
    <class kind="struct">bsa::fo4::hashing::hash</class>
    <class kind="class">bsa::fo4::chunk</class>
    <class kind="struct">bsa::fo4::chunk::compression_params</class>
    <class kind="struct">bsa::fo4::chunk::mips_t</class>
    <class kind="class">bsa::fo4::file</class>
    <class kind="struct">bsa::fo4::file::read_params</class>
    <class kind="struct">bsa::fo4::file::write_params</class>
    <class kind="struct">bsa::fo4::file::header_t</class>
    <class kind="class">bsa::fo4::archive</class>
    <class kind="struct">bsa::fo4::archive::meta_info</class>
    <namespace>bsa</namespace>
    <namespace>bsa::fo4</namespace>
    <namespace>bsa::fo4::hashing</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.hpp</name>
    <filename>fwd_8hpp.html</filename>
    <namespace>bsa</namespace>
    <namespace>bsa::components</namespace>
    <namespace>bsa::fo4</namespace>
    <namespace>bsa::fo4::hashing</namespace>
    <namespace>bsa::tes3</namespace>
    <namespace>bsa::tes3::hashing</namespace>
    <namespace>bsa::tes4</namespace>
    <namespace>bsa::tes4::hashing</namespace>
  </compound>
  <compound kind="file">
    <name>tes3.hpp</name>
    <filename>tes3_8hpp.html</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">bsa/detail/common.hpp</includes>
    <class kind="struct">bsa::tes3::hashing::hash</class>
    <class kind="class">bsa::tes3::file</class>
    <class kind="class">bsa::tes3::archive</class>
    <namespace>bsa</namespace>
    <namespace>bsa::tes3</namespace>
    <namespace>bsa::tes3::hashing</namespace>
  </compound>
  <compound kind="file">
    <name>tes4.hpp</name>
    <filename>tes4_8hpp.html</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">bsa/detail/common.hpp</includes>
    <class kind="struct">bsa::tes4::hashing::hash</class>
    <class kind="class">bsa::tes4::file</class>
    <class kind="struct">bsa::tes4::file::compression_params</class>
    <class kind="struct">bsa::tes4::file::read_params</class>
    <class kind="struct">bsa::tes4::file::write_params</class>
    <class kind="class">bsa::tes4::directory</class>
    <class kind="class">bsa::tes4::archive</class>
    <namespace>bsa</namespace>
    <namespace>bsa::tes4</namespace>
    <namespace>bsa::tes4::hashing</namespace>
  </compound>
  <compound kind="class">
    <name>bsa::fo4::archive</name>
    <filename>classbsa_1_1fo4_1_1archive.html</filename>
    <base>hashmap&lt; file &gt;</base>
    <class kind="struct">bsa::fo4::archive::meta_info</class>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>file</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1fo4_1_1archive.html</anchorfile>
      <anchor>a06bf61b5ca97d9442f3906ae45f3869a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>meta_info</type>
      <name>read</name>
      <anchorfile>classbsa_1_1fo4_1_1archive.html</anchorfile>
      <anchor>ab8c44d854d24e24838b6f4ce4e4aea7d</anchor>
      <arglist>(read_source a_source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1fo4_1_1archive.html</anchorfile>
      <anchor>adac0df37b14699ac396f53fa93b5fc8a</anchor>
      <arglist>(write_sink a_sink, const meta_info &amp;a_meta) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1fo4_1_1archive.html</anchorfile>
      <anchor>a06bf61b5ca97d9442f3906ae45f3869a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>meta_info</type>
      <name>read</name>
      <anchorfile>classbsa_1_1fo4_1_1archive.html</anchorfile>
      <anchor>ab8c44d854d24e24838b6f4ce4e4aea7d</anchor>
      <arglist>(read_source a_source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1fo4_1_1archive.html</anchorfile>
      <anchor>adac0df37b14699ac396f53fa93b5fc8a</anchor>
      <arglist>(write_sink a_sink, const meta_info &amp;a_meta) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>file</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::tes3::archive</name>
    <filename>classbsa_1_1tes3_1_1archive.html</filename>
    <base>hashmap&lt; file &gt;</base>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>file</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes3_1_1archive.html</anchorfile>
      <anchor>a96ebf110ee92a31fa53d79929f7beb95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classbsa_1_1tes3_1_1archive.html</anchorfile>
      <anchor>a9026f85cd42314f92d7657d4e3a1d199</anchor>
      <arglist>(read_source a_source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verify_offsets</name>
      <anchorfile>classbsa_1_1tes3_1_1archive.html</anchorfile>
      <anchor>a5e2c944dad757f8b86faad5f4f41ddcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1tes3_1_1archive.html</anchorfile>
      <anchor>a8bd3572954ed1eca8fdc07a141246ab4</anchor>
      <arglist>(write_sink a_sink) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes3_1_1archive.html</anchorfile>
      <anchor>a96ebf110ee92a31fa53d79929f7beb95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classbsa_1_1tes3_1_1archive.html</anchorfile>
      <anchor>a9026f85cd42314f92d7657d4e3a1d199</anchor>
      <arglist>(read_source a_source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verify_offsets</name>
      <anchorfile>classbsa_1_1tes3_1_1archive.html</anchorfile>
      <anchor>a5e2c944dad757f8b86faad5f4f41ddcb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1tes3_1_1archive.html</anchorfile>
      <anchor>a8bd3572954ed1eca8fdc07a141246ab4</anchor>
      <arglist>(write_sink a_sink) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>file</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::tes4::archive</name>
    <filename>classbsa_1_1tes4_1_1archive.html</filename>
    <base>hashmap&lt; directory, true &gt;</base>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>directory</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>archive_flag</type>
      <name>archive_flags</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a141e80a817206e8a882acd304bd9cebf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>archive_flags</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a3c48bfea645e9ad0d45dd0713428e8fb</anchor>
      <arglist>(archive_flag a_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compressed</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a7e7de849d2b82320f412aeab0ff1c5af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>directory_strings</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aac7def1ba556696e7bb58a239a89dc46</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>embedded_file_names</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a52285dcfc722119f8f59e11555de849d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>file_strings</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>af9efebd70dc54fb1e2b77b326a1558d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retain_directory_names</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aed26d8f8d45b455fff8170ac81b46c3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retain_file_name_offsets</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aac5c1f30ffe5c85a9b596764e92b2a48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retain_file_names</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aa17bff448f955d8c1fa55a5fbc96716d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retain_strings_during_startup</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a890c218e44f5ee66ee0e1cdb4477ac61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xbox_archive</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a705d2a06c2d25a1f214cdb3594251ea2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xbox_compressed</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a668cafb52016f79dd811009092a9c54e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>archive_type</type>
      <name>archive_types</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a7285c3a4f52c7dfd95c3dcbe8a001168</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>archive_types</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a82051152ff37e9e3aef4e1ad906d2907</anchor>
      <arglist>(archive_type a_types) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fonts</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a0e6eb84e9ad2e32bb64f19d5611b454d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>menus</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>af6697951d01b3b3b380625c7f864aeef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>meshes</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>adbc18f17ad352f330400a5a258014db9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>misc</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a13ff4831ecf3b38cb8a2c632d9603e09</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shaders</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a7f7c1f7afe0b9979167051d39fb30163</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sounds</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a4887d88866f6c9f04dd69477db048b82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>textures</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>abc9a402ddb6180c71385721fe335489c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trees</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a522c9330e0909f43a39f05df9d388db4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>voices</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aa17417553a34ac4474567316ab03741a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>ae66d04dfca92cb6337956d4396ffbe1c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>version</type>
      <name>read</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a1b91a0576109b3d2e8989f2aef303115</anchor>
      <arglist>(read_source a_source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verify_offsets</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a379d3902455021f27fc2d41fbaf8d4d7</anchor>
      <arglist>(version a_version) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>abcc63447f1a1fc06fe4c9d1fb0fbeb40</anchor>
      <arglist>(write_sink a_sink, version a_version) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>archive_flag</type>
      <name>archive_flags</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a141e80a817206e8a882acd304bd9cebf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>archive_flags</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a3c48bfea645e9ad0d45dd0713428e8fb</anchor>
      <arglist>(archive_flag a_flags) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compressed</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a7e7de849d2b82320f412aeab0ff1c5af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>directory_strings</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aac7def1ba556696e7bb58a239a89dc46</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>embedded_file_names</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a52285dcfc722119f8f59e11555de849d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>file_strings</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>af9efebd70dc54fb1e2b77b326a1558d5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retain_directory_names</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aed26d8f8d45b455fff8170ac81b46c3e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retain_file_name_offsets</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aac5c1f30ffe5c85a9b596764e92b2a48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retain_file_names</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aa17bff448f955d8c1fa55a5fbc96716d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retain_strings_during_startup</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a890c218e44f5ee66ee0e1cdb4477ac61</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xbox_archive</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a705d2a06c2d25a1f214cdb3594251ea2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xbox_compressed</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a668cafb52016f79dd811009092a9c54e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>archive_type</type>
      <name>archive_types</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a7285c3a4f52c7dfd95c3dcbe8a001168</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>archive_types</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a82051152ff37e9e3aef4e1ad906d2907</anchor>
      <arglist>(archive_type a_types) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fonts</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a0e6eb84e9ad2e32bb64f19d5611b454d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>menus</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>af6697951d01b3b3b380625c7f864aeef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>meshes</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>adbc18f17ad352f330400a5a258014db9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>misc</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a13ff4831ecf3b38cb8a2c632d9603e09</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shaders</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a7f7c1f7afe0b9979167051d39fb30163</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sounds</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a4887d88866f6c9f04dd69477db048b82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>textures</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>abc9a402ddb6180c71385721fe335489c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trees</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a522c9330e0909f43a39f05df9d388db4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>voices</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>aa17417553a34ac4474567316ab03741a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>ae66d04dfca92cb6337956d4396ffbe1c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>version</type>
      <name>read</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a1b91a0576109b3d2e8989f2aef303115</anchor>
      <arglist>(read_source a_source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verify_offsets</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>a379d3902455021f27fc2d41fbaf8d4d7</anchor>
      <arglist>(version a_version) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1tes4_1_1archive.html</anchorfile>
      <anchor>abcc63447f1a1fc06fe4c9d1fb0fbeb40</anchor>
      <arglist>(write_sink a_sink, version a_version) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>directory</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::components::basic_byte_container</name>
    <filename>classbsa_1_1components_1_1basic__byte__container.html</filename>
    <member kind="function">
      <type>basic_byte_container &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a29cf6e98741c0c4aa7238081dae634f1</anchor>
      <arglist>(const basic_byte_container &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>basic_byte_container &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a4d655cfa333440a8588f0edad1608547</anchor>
      <arglist>(basic_byte_container &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basic_byte_container</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afd705c069bfad9a2c4358054cad7dd31</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basic_byte_container</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>aae10118922c1ebd009b7bf8758a16078</anchor>
      <arglist>(const basic_byte_container &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basic_byte_container</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a55e9ca55a3af3aae83e6726ece17c3fe</anchor>
      <arglist>(basic_byte_container &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~basic_byte_container</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a74a0f087e0126ae81921cf17b6b61986</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>basic_byte_container &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a29cf6e98741c0c4aa7238081dae634f1</anchor>
      <arglist>(const basic_byte_container &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>basic_byte_container &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a4d655cfa333440a8588f0edad1608547</anchor>
      <arglist>(basic_byte_container &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basic_byte_container</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afd705c069bfad9a2c4358054cad7dd31</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basic_byte_container</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>aae10118922c1ebd009b7bf8758a16078</anchor>
      <arglist>(const basic_byte_container &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>basic_byte_container</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a55e9ca55a3af3aae83e6726ece17c3fe</anchor>
      <arglist>(basic_byte_container &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~basic_byte_container</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a74a0f087e0126ae81921cf17b6b61986</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::components::byte_container</name>
    <filename>classbsa_1_1components_1_1byte__container.html</filename>
    <base>bsa::components::basic_byte_container</base>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1byte__container.html</anchorfile>
      <anchor>a6fc8f1af4e747c6c0fd78e158625445e</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1byte__container.html</anchorfile>
      <anchor>a7f4a21f08096638f61ac065b0bab5bad</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1byte__container.html</anchorfile>
      <anchor>a6fc8f1af4e747c6c0fd78e158625445e</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1byte__container.html</anchorfile>
      <anchor>a7f4a21f08096638f61ac065b0bab5bad</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::fo4::chunk</name>
    <filename>classbsa_1_1fo4_1_1chunk.html</filename>
    <base>bsa::components::compressed_byte_container</base>
    <class kind="struct">bsa::fo4::chunk::compression_params</class>
    <class kind="struct">bsa::fo4::chunk::mips_t</class>
    <member kind="function">
      <type>void</type>
      <name>compress</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>a03558afb9b786438a83ab79919feb9ef</anchor>
      <arglist>(const compression_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>compress_bound</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>a58b6d9e67eea337d9996e095ceaef4f4</anchor>
      <arglist>(compression_format a_format) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>compress_into</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>acfe744a9354136d2981a6144f41258f8</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out, const compression_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompress</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>a69857013fa04a7a151b7d70437d5fdb8</anchor>
      <arglist>(compression_format a_format)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompress_into</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>aba5a1bed467a0c7bf3e94f83c27850c9</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out, compression_format a_format) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>a4ead198c358e7f965dc32070618d48a8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>decompressed_size</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>af27650d5b908666b1d6cf9a3517cfa0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a06b6911070fbf5ad2c219dc3c0747647</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a81718a49fd319431da6d4c89424dd1e3</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compressed</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>aaa95fbcc92f30c30af345eee6045e145</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>struct bsa::fo4::chunk::mips_t</type>
      <name>mips</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>afe35802fc125ed291a38991db4bfa5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compress</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>a03558afb9b786438a83ab79919feb9ef</anchor>
      <arglist>(const compression_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>compress_bound</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>a58b6d9e67eea337d9996e095ceaef4f4</anchor>
      <arglist>(compression_format a_format) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>compress_into</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>acfe744a9354136d2981a6144f41258f8</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out, const compression_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompress</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>a69857013fa04a7a151b7d70437d5fdb8</anchor>
      <arglist>(compression_format a_format)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompress_into</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>aba5a1bed467a0c7bf3e94f83c27850c9</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out, compression_format a_format) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1fo4_1_1chunk.html</anchorfile>
      <anchor>a4ead198c358e7f965dc32070618d48a8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>decompressed_size</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>af27650d5b908666b1d6cf9a3517cfa0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a06b6911070fbf5ad2c219dc3c0747647</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a81718a49fd319431da6d4c89424dd1e3</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compressed</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>aaa95fbcc92f30c30af345eee6045e145</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::components::compressed_byte_container</name>
    <filename>classbsa_1_1components_1_1compressed__byte__container.html</filename>
    <base>bsa::components::basic_byte_container</base>
    <member kind="function">
      <type>std::size_t</type>
      <name>decompressed_size</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>af27650d5b908666b1d6cf9a3517cfa0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a06b6911070fbf5ad2c219dc3c0747647</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a81718a49fd319431da6d4c89424dd1e3</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compressed</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>aaa95fbcc92f30c30af345eee6045e145</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>decompressed_size</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>af27650d5b908666b1d6cf9a3517cfa0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a06b6911070fbf5ad2c219dc3c0747647</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a81718a49fd319431da6d4c89424dd1e3</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compressed</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>aaa95fbcc92f30c30af345eee6045e145</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::compression_error</name>
    <filename>classbsa_1_1compression__error.html</filename>
    <base>bsa::exception</base>
    <member kind="enumeration">
      <type></type>
      <name>library</name>
      <anchorfile>classbsa_1_1compression__error.html</anchorfile>
      <anchor>af490395f1ceb92e38dfac2b1b170ca8f</anchor>
      <arglist></arglist>
      <enumvalue file="classbsa_1_1compression__error.html" anchor="af490395f1ceb92e38dfac2b1b170ca8fad1efad72dc5b17dc66a46767c32fff40">internal</enumvalue>
      <enumvalue file="classbsa_1_1compression__error.html" anchor="af490395f1ceb92e38dfac2b1b170ca8fa7a990d405d2c6fb93aa8fbb0ec1a3b23">zlib</enumvalue>
      <enumvalue file="classbsa_1_1compression__error.html" anchor="af490395f1ceb92e38dfac2b1b170ca8fafb14b6f9d7376218a1e1b7dfb1b58260">lz4</enumvalue>
      <enumvalue file="classbsa_1_1compression__error.html" anchor="af490395f1ceb92e38dfac2b1b170ca8fa8edbb3efc79bd72cc7c986e1470497e2">xmem</enumvalue>
    </member>
    <member kind="function">
      <type>library</type>
      <name>source_library</name>
      <anchorfile>classbsa_1_1compression__error.html</anchorfile>
      <anchor>a4f387a2db42f6165f93a046bcbf9c842</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classbsa_1_1exception.html</anchorfile>
      <anchor>a688a1e6d671abc581f3d73338361937a</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>library</type>
      <name>source_library</name>
      <anchorfile>classbsa_1_1compression__error.html</anchorfile>
      <anchor>a4f387a2db42f6165f93a046bcbf9c842</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classbsa_1_1exception.html</anchorfile>
      <anchor>a688a1e6d671abc581f3d73338361937a</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::fo4::chunk::compression_params</name>
    <filename>structbsa_1_1fo4_1_1chunk_1_1compression__params.html</filename>
    <member kind="variable">
      <type>compression_format</type>
      <name>compression_format_</name>
      <anchorfile>structbsa_1_1fo4_1_1chunk_1_1compression__params.html</anchorfile>
      <anchor>a5aa9d413224e1c6fb49e844104f21456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_level</type>
      <name>compression_level_</name>
      <anchorfile>structbsa_1_1fo4_1_1chunk_1_1compression__params.html</anchorfile>
      <anchor>a6b55bcf240e7d7960c755bd5685921d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::tes4::file::compression_params</name>
    <filename>structbsa_1_1tes4_1_1file_1_1compression__params.html</filename>
    <member kind="variable">
      <type>version</type>
      <name>version_</name>
      <anchorfile>structbsa_1_1tes4_1_1file_1_1compression__params.html</anchorfile>
      <anchor>a1b51f2d1a71a4a4a70c778474e5fec2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_codec</type>
      <name>compression_codec_</name>
      <anchorfile>structbsa_1_1tes4_1_1file_1_1compression__params.html</anchorfile>
      <anchor>afbad766f75ccb4b3d6dce540e7a42b5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::tes4::directory</name>
    <filename>classbsa_1_1tes4_1_1directory.html</filename>
    <base>hashmap&lt; file &gt;</base>
    <member kind="typedef">
      <type>components::key&lt; hashing::hash, hashing::hash_directory_in_place &gt;</type>
      <name>key</name>
      <anchorfile>classbsa_1_1tes4_1_1directory.html</anchorfile>
      <anchor>a2a74076f91ced4c4f886b77cb40613b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>file</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes4_1_1directory.html</anchorfile>
      <anchor>a0d92f61cccd73b9d3cfbd8fa82a92138</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>components::key&lt; hashing::hash, hashing::hash_directory_in_place &gt;</type>
      <name>key</name>
      <anchorfile>classbsa_1_1tes4_1_1directory.html</anchorfile>
      <anchor>a2a74076f91ced4c4f886b77cb40613b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>file</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes4_1_1directory.html</anchorfile>
      <anchor>a0d92f61cccd73b9d3cfbd8fa82a92138</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::doxygen_detail</name>
    <filename>structbsa_1_1doxygen__detail.html</filename>
    <member kind="function" protection="protected" static="yes">
      <type>static std::optional&lt; file_format &gt;</type>
      <name>guess_file_format</name>
      <anchorfile>structbsa_1_1doxygen__detail.html</anchorfile>
      <anchor>ab9f70d85dbb42c5de781a9d19023d1b8</anchor>
      <arglist>(std::filesystem::path a_path)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>compress</name>
      <anchorfile>structbsa_1_1doxygen__detail.html</anchorfile>
      <anchor>a4013bacb4f593d293c7e96c1e958f425</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::size_t</type>
      <name>compress_bound</name>
      <anchorfile>structbsa_1_1doxygen__detail.html</anchorfile>
      <anchor>a6b0b387df9b2bcf2f47236c91c749865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::size_t</type>
      <name>compress_into</name>
      <anchorfile>structbsa_1_1doxygen__detail.html</anchorfile>
      <anchor>ae5f7b2d26f305c2a4ae4fdff123fb83f</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>decompress</name>
      <anchorfile>structbsa_1_1doxygen__detail.html</anchorfile>
      <anchor>a97aefcba3aca94a7e37140d4b0457e56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>decompress_into</name>
      <anchorfile>structbsa_1_1doxygen__detail.html</anchorfile>
      <anchor>a50543ac6103f21f7c716decdc5cfc55f</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>structbsa_1_1doxygen__detail.html</anchorfile>
      <anchor>a33b282dec610c65a05738fb4139530ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>structbsa_1_1doxygen__detail.html</anchorfile>
      <anchor>a03728339cec2cdbadba863d24b9b7b5a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::exception</name>
    <filename>classbsa_1_1exception.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type></type>
      <name>exception</name>
      <anchorfile>classbsa_1_1exception.html</anchorfile>
      <anchor>a21c32acf840237c3ded6663fdd32d134</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>exception</name>
      <anchorfile>classbsa_1_1exception.html</anchorfile>
      <anchor>a7a6742952d6e8613ee32be64c37d9c04</anchor>
      <arglist>(const char *a_what) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classbsa_1_1exception.html</anchorfile>
      <anchor>a688a1e6d671abc581f3d73338361937a</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>exception</name>
      <anchorfile>classbsa_1_1exception.html</anchorfile>
      <anchor>a21c32acf840237c3ded6663fdd32d134</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>exception</name>
      <anchorfile>classbsa_1_1exception.html</anchorfile>
      <anchor>a7a6742952d6e8613ee32be64c37d9c04</anchor>
      <arglist>(const char *a_what) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classbsa_1_1exception.html</anchorfile>
      <anchor>a688a1e6d671abc581f3d73338361937a</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::fo4::file</name>
    <filename>classbsa_1_1fo4_1_1file.html</filename>
    <class kind="struct">bsa::fo4::file::header_t</class>
    <class kind="struct">bsa::fo4::file::read_params</class>
    <class kind="struct">bsa::fo4::file::write_params</class>
    <member kind="typedef">
      <type>chunk</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a307dc4309601d24f6fb201a7f301e392</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ab43a90bd25a1958947ee01e0826e42ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a5c852cb44fa1043437f6bc1c97b3f02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>components::key&lt; hashing::hash, hashing::hash_file_in_place &gt;</type>
      <name>key</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ab3fe5d07f1ba42935d1e684ad5318679</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>file &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a633ecf7a3d80cbf3a081b35c5ce18c33</anchor>
      <arglist>(const file &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>file &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ac8a7ff1eaf570df26414559b9a12a537</anchor>
      <arglist>(file &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>capacity</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a829fdd2ceaa9c971a4cddc72927ee5a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a30b6c5a1d33059de6706f10d86c35eb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a351d5d0a908b5dd0aa6428c4e6894788</anchor>
      <arglist>(std::size_t a_count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ab17b9fc41f67c3573a89e6b91dc84d8a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a94ebbc7272a19d6ada4a9d2ad6331ac4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>file</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a3ab343e7f5c886d268b6de94f66d57d8</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>file</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a6a16a78d9fca59dfe6249dae752588a9</anchor>
      <arglist>(const file &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>file</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a4c39681b62814e7a8f632fdd758c1f07</anchor>
      <arglist>(file &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~file</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a20ea8979be94d79ea21e98b2c67d199c</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a0ebfb37a5e59ee9fa6e662b213c9f5a3</anchor>
      <arglist>(std::size_t a_pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a966ae8dfb01259ce27d79b6a91555122</anchor>
      <arglist>(std::size_t a_pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a59fd37188dc1737434efa70d9d4f648b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a2e22f385cc43bf3dfe420574fa49a56f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a3e3843aec03161644aaeb65fb39ea47e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a4692c80065e0238f09914614e92ac568</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a4397103c481bd58d2620ad4769d1acc7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a500efff33352c2c157baa7491de6af12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a2c532cf82f848fb5f553dafab12407d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a2bfe5bf4b69a6cde629da56afd15c69a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a073c951891e44e8da87d4f34304904d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a14e2fd9ff90b1aa3cbc361efe9e1b65b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>afd1b1e634c98de5c7b7df2b3f63bb671</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>af4ae160d3573ffbdc9119ea1475884c5</anchor>
      <arglist>(Args &amp;&amp;... a_args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ab6d8819ad4b4814449a6ab1dda95235b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ad45344276128227325f5d25aa04c8efc</anchor>
      <arglist>(value_type a_value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ac8a20bc880c075dd668e66314aacb999</anchor>
      <arglist>(read_source a_source, const read_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a9e936dc39dd197043587d9793a933e72</anchor>
      <arglist>(write_sink a_sink, const write_params &amp;a_params) const</arglist>
    </member>
    <member kind="variable">
      <type>struct bsa::fo4::file::header_t</type>
      <name>header</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a80ba252a75ba2032a043dcb3edc8f732</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>chunk</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a307dc4309601d24f6fb201a7f301e392</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ab43a90bd25a1958947ee01e0826e42ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a5c852cb44fa1043437f6bc1c97b3f02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>components::key&lt; hashing::hash, hashing::hash_file_in_place &gt;</type>
      <name>key</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ab3fe5d07f1ba42935d1e684ad5318679</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>file &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a633ecf7a3d80cbf3a081b35c5ce18c33</anchor>
      <arglist>(const file &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>file &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ac8a7ff1eaf570df26414559b9a12a537</anchor>
      <arglist>(file &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>capacity</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a829fdd2ceaa9c971a4cddc72927ee5a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a30b6c5a1d33059de6706f10d86c35eb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a351d5d0a908b5dd0aa6428c4e6894788</anchor>
      <arglist>(std::size_t a_count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ab17b9fc41f67c3573a89e6b91dc84d8a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a94ebbc7272a19d6ada4a9d2ad6331ac4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>file</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a3ab343e7f5c886d268b6de94f66d57d8</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>file</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a6a16a78d9fca59dfe6249dae752588a9</anchor>
      <arglist>(const file &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>file</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a4c39681b62814e7a8f632fdd758c1f07</anchor>
      <arglist>(file &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~file</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a20ea8979be94d79ea21e98b2c67d199c</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a0ebfb37a5e59ee9fa6e662b213c9f5a3</anchor>
      <arglist>(std::size_t a_pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a966ae8dfb01259ce27d79b6a91555122</anchor>
      <arglist>(std::size_t a_pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a59fd37188dc1737434efa70d9d4f648b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a2e22f385cc43bf3dfe420574fa49a56f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a3e3843aec03161644aaeb65fb39ea47e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a4692c80065e0238f09914614e92ac568</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a4397103c481bd58d2620ad4769d1acc7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a500efff33352c2c157baa7491de6af12</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a2c532cf82f848fb5f553dafab12407d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a2bfe5bf4b69a6cde629da56afd15c69a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a073c951891e44e8da87d4f34304904d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a14e2fd9ff90b1aa3cbc361efe9e1b65b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>afd1b1e634c98de5c7b7df2b3f63bb671</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>af4ae160d3573ffbdc9119ea1475884c5</anchor>
      <arglist>(Args &amp;&amp;... a_args) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ab6d8819ad4b4814449a6ab1dda95235b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ad45344276128227325f5d25aa04c8efc</anchor>
      <arglist>(value_type a_value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>ac8a20bc880c075dd668e66314aacb999</anchor>
      <arglist>(read_source a_source, const read_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1fo4_1_1file.html</anchorfile>
      <anchor>a9e936dc39dd197043587d9793a933e72</anchor>
      <arglist>(write_sink a_sink, const write_params &amp;a_params) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::tes3::file</name>
    <filename>classbsa_1_1tes3_1_1file.html</filename>
    <base>bsa::components::byte_container</base>
    <member kind="typedef">
      <type>components::key&lt; hashing::hash, hashing::hash_file_in_place &gt;</type>
      <name>key</name>
      <anchorfile>classbsa_1_1tes3_1_1file.html</anchorfile>
      <anchor>ace7210a0ac30ecfcd6affc582f6004a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes3_1_1file.html</anchorfile>
      <anchor>a3788e091ff3dffbc5824f4b406314a32</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classbsa_1_1tes3_1_1file.html</anchorfile>
      <anchor>ac5107b572b6c532548606f1a8ef7abee</anchor>
      <arglist>(read_source a_source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1tes3_1_1file.html</anchorfile>
      <anchor>a23c0d06d0f3633c21c018bc2b20e9b5a</anchor>
      <arglist>(write_sink a_sink) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1byte__container.html</anchorfile>
      <anchor>a6fc8f1af4e747c6c0fd78e158625445e</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1byte__container.html</anchorfile>
      <anchor>a7f4a21f08096638f61ac065b0bab5bad</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>components::key&lt; hashing::hash, hashing::hash_file_in_place &gt;</type>
      <name>key</name>
      <anchorfile>classbsa_1_1tes3_1_1file.html</anchorfile>
      <anchor>ace7210a0ac30ecfcd6affc582f6004a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes3_1_1file.html</anchorfile>
      <anchor>a3788e091ff3dffbc5824f4b406314a32</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classbsa_1_1tes3_1_1file.html</anchorfile>
      <anchor>ac5107b572b6c532548606f1a8ef7abee</anchor>
      <arglist>(read_source a_source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1tes3_1_1file.html</anchorfile>
      <anchor>a23c0d06d0f3633c21c018bc2b20e9b5a</anchor>
      <arglist>(write_sink a_sink) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1byte__container.html</anchorfile>
      <anchor>a6fc8f1af4e747c6c0fd78e158625445e</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1byte__container.html</anchorfile>
      <anchor>a7f4a21f08096638f61ac065b0bab5bad</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::tes4::file</name>
    <filename>classbsa_1_1tes4_1_1file.html</filename>
    <base>bsa::components::compressed_byte_container</base>
    <class kind="struct">bsa::tes4::file::compression_params</class>
    <class kind="struct">bsa::tes4::file::read_params</class>
    <class kind="struct">bsa::tes4::file::write_params</class>
    <member kind="typedef">
      <type>components::key&lt; hashing::hash, hashing::hash_file_in_place &gt;</type>
      <name>key</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a7c58900ac3938dc739b7cee5d96d1bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compress</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a76facf96641289741d2a744ebd4a1010</anchor>
      <arglist>(const compression_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>compress_bound</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a263811c210c510fc6637539ed9637f68</anchor>
      <arglist>(const compression_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>compress_into</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a1db10a506e3d05a153c504e9ca8ef32e</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out, const compression_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompress</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>ad12da870b698714ea70d3b7edb621474</anchor>
      <arglist>(const compression_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompress_into</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a75bf256a4f4715d459e2b197cf864b53</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out, const compression_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a675181544541f5832709666aec9ca4c3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a08838b09f9a86c9ca62415fd40d19e97</anchor>
      <arglist>(read_source a_source, const read_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>ad43f01273d5e06db248903478f81dc18</anchor>
      <arglist>(write_sink a_sink, const write_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>decompressed_size</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>af27650d5b908666b1d6cf9a3517cfa0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a06b6911070fbf5ad2c219dc3c0747647</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a81718a49fd319431da6d4c89424dd1e3</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compressed</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>aaa95fbcc92f30c30af345eee6045e145</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>components::key&lt; hashing::hash, hashing::hash_file_in_place &gt;</type>
      <name>key</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a7c58900ac3938dc739b7cee5d96d1bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compress</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a76facf96641289741d2a744ebd4a1010</anchor>
      <arglist>(const compression_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>compress_bound</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a263811c210c510fc6637539ed9637f68</anchor>
      <arglist>(const compression_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>compress_into</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a1db10a506e3d05a153c504e9ca8ef32e</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out, const compression_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompress</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>ad12da870b698714ea70d3b7edb621474</anchor>
      <arglist>(const compression_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompress_into</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a75bf256a4f4715d459e2b197cf864b53</anchor>
      <arglist>(std::span&lt; std::byte &gt; a_out, const compression_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a675181544541f5832709666aec9ca4c3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>a08838b09f9a86c9ca62415fd40d19e97</anchor>
      <arglist>(read_source a_source, const read_params &amp;a_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classbsa_1_1tes4_1_1file.html</anchorfile>
      <anchor>ad43f01273d5e06db248903478f81dc18</anchor>
      <arglist>(write_sink a_sink, const write_params &amp;a_params) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>decompressed_size</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>af27650d5b908666b1d6cf9a3517cfa0d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a06b6911070fbf5ad2c219dc3c0747647</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>a81718a49fd319431da6d4c89424dd1e3</anchor>
      <arglist>(std::vector&lt; std::byte &gt; a_data, std::optional&lt; std::size_t &gt; a_decompressedSize=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compressed</name>
      <anchorfile>classbsa_1_1components_1_1compressed__byte__container.html</anchorfile>
      <anchor>aaa95fbcc92f30c30af345eee6045e145</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a096ea2d7371c338bf5238b1572c454a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>af0a9c873e76e769eae53d6273595663d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::span&lt; const std::byte &gt;</type>
      <name>as_bytes</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>a5432c026029905920e29cb441f816557</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::byte *</type>
      <name>data</name>
      <anchorfile>classbsa_1_1components_1_1basic__byte__container.html</anchorfile>
      <anchor>afdf82c0d56de7bd18beeb6e69bb8a27e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::fo4::hashing::hash</name>
    <filename>structbsa_1_1fo4_1_1hashing_1_1hash.html</filename>
    <member kind="variable">
      <type>std::uint32_t</type>
      <name>file</name>
      <anchorfile>structbsa_1_1fo4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a76bf1debf36cb6c39fa444edac8b1074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint32_t</type>
      <name>extension</name>
      <anchorfile>structbsa_1_1fo4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>ad28d90782c77bccac026e69880c1913e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint32_t</type>
      <name>directory</name>
      <anchorfile>structbsa_1_1fo4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>af198c2adc5781bfccd865d244e6446f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1fo4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>adc9625214b248a9afe4a2e14eb0c383f</anchor>
      <arglist>(const hash &amp;, const hash &amp;) noexcept=default</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>structbsa_1_1fo4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a27716300f39300b8a58cce1b673966a3</anchor>
      <arglist>(const hash &amp;, const hash &amp;) noexcept=default</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1fo4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>adc9625214b248a9afe4a2e14eb0c383f</anchor>
      <arglist>(const hash &amp;, const hash &amp;) noexcept=default</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>structbsa_1_1fo4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a27716300f39300b8a58cce1b673966a3</anchor>
      <arglist>(const hash &amp;, const hash &amp;) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::tes3::hashing::hash</name>
    <filename>structbsa_1_1tes3_1_1hashing_1_1hash.html</filename>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>numeric</name>
      <anchorfile>structbsa_1_1tes3_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a0edd9c03b6c4828e16ccc5a755f7c472</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>std::uint32_t</type>
      <name>lo</name>
      <anchorfile>structbsa_1_1tes3_1_1hashing_1_1hash.html</anchorfile>
      <anchor>aef9ef6e667e35839c05ca9eebebeb384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint32_t</type>
      <name>hi</name>
      <anchorfile>structbsa_1_1tes3_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a1b462dc31d6e3516f83fd1059d9d52e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1tes3_1_1hashing_1_1hash.html</anchorfile>
      <anchor>adc9625214b248a9afe4a2e14eb0c383f</anchor>
      <arglist>(const hash &amp;, const hash &amp;) noexcept=default</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>structbsa_1_1tes3_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a4327bd5e532ed41b702a968232f7e18d</anchor>
      <arglist>(const hash &amp;a_lhs, const hash &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1tes3_1_1hashing_1_1hash.html</anchorfile>
      <anchor>adc9625214b248a9afe4a2e14eb0c383f</anchor>
      <arglist>(const hash &amp;, const hash &amp;) noexcept=default</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>structbsa_1_1tes3_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a4327bd5e532ed41b702a968232f7e18d</anchor>
      <arglist>(const hash &amp;a_lhs, const hash &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>numeric</name>
      <anchorfile>structbsa_1_1tes3_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a0edd9c03b6c4828e16ccc5a755f7c472</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::tes4::hashing::hash</name>
    <filename>structbsa_1_1tes4_1_1hashing_1_1hash.html</filename>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>numeric</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>aea9dd1b91729b54e5199f99bc7b11cba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>std::uint8_t</type>
      <name>last</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>af985b3192139e32f7da7b219e634daf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint8_t</type>
      <name>last2</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a5f475ff8f8becf70e0f1dcaf151c1550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint8_t</type>
      <name>length</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a2d0abcbd557a51c0b622809d161130b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint8_t</type>
      <name>first</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a92e41801933723f6c79145a5861b02aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint32_t</type>
      <name>crc</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a1178cfe7cb8c70dc4ad1603103975d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>adc9625214b248a9afe4a2e14eb0c383f</anchor>
      <arglist>(const hash &amp;, const hash &amp;) noexcept=default</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a4327bd5e532ed41b702a968232f7e18d</anchor>
      <arglist>(const hash &amp;a_lhs, const hash &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>adc9625214b248a9afe4a2e14eb0c383f</anchor>
      <arglist>(const hash &amp;, const hash &amp;) noexcept=default</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>a4327bd5e532ed41b702a968232f7e18d</anchor>
      <arglist>(const hash &amp;a_lhs, const hash &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>numeric</name>
      <anchorfile>structbsa_1_1tes4_1_1hashing_1_1hash.html</anchorfile>
      <anchor>aea9dd1b91729b54e5199f99bc7b11cba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::components::hashmap</name>
    <filename>classbsa_1_1components_1_1hashmap.html</filename>
    <templarg>class T</templarg>
    <templarg>bool RECURSE</templarg>
    <class kind="class">bsa::components::hashmap::index_t</class>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>hashmap &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afbf363b46d6065a38a0b9e53be7cf567</anchor>
      <arglist>(const hashmap &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>hashmap &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4f05fbff0d2345c297cd770e45777919</anchor>
      <arglist>(hashmap &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashmap</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2660f6bf9949da6e12894ffdc171f611</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashmap</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad07b09513ca0ebdebd7e319264865b14</anchor>
      <arglist>(const hashmap &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashmap</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a5c1d3a1c5041cbad4a4a2a6bb5a3f092</anchor>
      <arglist>(hashmap &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~hashmap</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afc0e83edd822931cccadb62ee607ff06</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>typename T::key</type>
      <name>key_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab5a2b045f3895f8e24d8fd60ce4b33be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>mapped_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a175b6fb459551b1ffc5234f62351fea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const key_type, mapped_type &gt;</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afa94e8a401bc1a82150bb80856d0508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::key_compare</type>
      <name>key_compare</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a82a1cbe1587f03b5c010e793a664ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a6a17f1ff476ae31002e2eaa199246605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad7ba34f8859c8d0b2149eabc229f131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; mapped_type &gt;</type>
      <name>index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4c8b88df846bfa9be28bfcb4eb876fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>index_t&lt; const mapped_type &gt;</type>
      <name>const_index</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ab11a383ffd618d3a9abc8e7acad6bb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>hashmap &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afbf363b46d6065a38a0b9e53be7cf567</anchor>
      <arglist>(const hashmap &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>hashmap &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a4f05fbff0d2345c297cd770e45777919</anchor>
      <arglist>(hashmap &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8323ce8a4363e9aa1900c702db23d824</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a02e86261859aa54b60c8aab9249b745c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashmap</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2660f6bf9949da6e12894ffdc171f611</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashmap</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ad07b09513ca0ebdebd7e319264865b14</anchor>
      <arglist>(const hashmap &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashmap</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a5c1d3a1c5041cbad4a4a2a6bb5a3f092</anchor>
      <arglist>(hashmap &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~hashmap</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>afc0e83edd822931cccadb62ee607ff06</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a2685315d484419a6c821a524e34c0221</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ae7605acca06cb7139d5be8b616ca571d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>aa69f09325ec659912514d502458d01fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a3e29ceff8e26f543f3883bb841904dae</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8465be933e3ddbb0beff1000fbe12494</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a385aa7c5914372f47c3530510470ef8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>a8be04385cad568cb9bff1e8a33cd324c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_index</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af268fc2252a293e0d80e09e6541aeda5</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>adf0b067b3bb96b2287cd9e6a5a7bdc06</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>add527d0ed7759ac82e7c3f507e14026d</anchor>
      <arglist>(const key_type &amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>ada79189db0781a44d9c4e43bc73b5f9c</anchor>
      <arglist>(const key_type &amp;a_key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classbsa_1_1components_1_1hashmap.html</anchorfile>
      <anchor>af71f9a6ff9e884392cb5aea133f6d2ed</anchor>
      <arglist>(key_type a_key, mapped_type a_value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::fo4::file::header_t</name>
    <filename>structbsa_1_1fo4_1_1file_1_1header__t.html</filename>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>height</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1header__t.html</anchorfile>
      <anchor>a7d32ac300589999d921cd87bfb825992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>width</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1header__t.html</anchorfile>
      <anchor>adcdbf409464f787f4228ce34c35cb81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint8_t</type>
      <name>mip_count</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1header__t.html</anchorfile>
      <anchor>a7635d6ccf31c230b08cb5ebf35a063f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint8_t</type>
      <name>format</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1header__t.html</anchorfile>
      <anchor>adf3b580b85f55c0c1b9e311ac10b5bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint8_t</type>
      <name>flags</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1header__t.html</anchorfile>
      <anchor>a24c7a290c5f0de8f8a580de2b13c1164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint8_t</type>
      <name>tile_mode</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1header__t.html</anchorfile>
      <anchor>a945c29baeed5cc1989c949f488ab7fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1header__t.html</anchorfile>
      <anchor>ac66ac29e149f7dc2bff6757a6c2e3e0d</anchor>
      <arglist>(header_t, header_t) noexcept=default</arglist>
    </member>
    <member kind="friend">
      <type>friend constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1header__t.html</anchorfile>
      <anchor>ac66ac29e149f7dc2bff6757a6c2e3e0d</anchor>
      <arglist>(header_t, header_t) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::components::hashmap::index_t</name>
    <filename>classbsa_1_1components_1_1hashmap_1_1index__t.html</filename>
    <templarg>class U</templarg>
    <member kind="typedef">
      <type>U</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a10aa18f113e5563aeb09f5aecd4873d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a971f714dbce01f72ce5f79653f4ab054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a09fc645207d53f4e27c698c697bb53cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>index_t</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a2798b861fd7feff38219a3922ef8ecc1</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a287a6019c584c4e2ad3f9ef0294787da</anchor>
      <arglist>(K &amp;&amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a9727a8aedfb3b1ede5a09fdfa8da17b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a76e91ceb2df2db0db8ef3783ef9a4af2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a91a5e7e0a5e3d3ce2943ea18b01ef5b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>U</type>
      <name>value_type</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a10aa18f113e5563aeb09f5aecd4873d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a971f714dbce01f72ce5f79653f4ab054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a09fc645207d53f4e27c698c697bb53cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>index_t</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a2798b861fd7feff38219a3922ef8ecc1</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator[]</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a287a6019c584c4e2ad3f9ef0294787da</anchor>
      <arglist>(K &amp;&amp;a_key) const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a9727a8aedfb3b1ede5a09fdfa8da17b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a76e91ceb2df2db0db8ef3783ef9a4af2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classbsa_1_1components_1_1hashmap_1_1index__t.html</anchorfile>
      <anchor>a91a5e7e0a5e3d3ce2943ea18b01ef5b7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::components::key</name>
    <filename>classbsa_1_1components_1_1key.html</filename>
    <templarg>class Hash</templarg>
    <templarg>hasher_t&lt; Hash &gt; Hasher</templarg>
    <member kind="typedef">
      <type>Hash</type>
      <name>hash_type</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a255165b9d25841e82d269f9104887120</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>key &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a2609f52bf1dedf5a30b523a7234ae61c</anchor>
      <arglist>(const key &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>key &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a9ba7d57fae95506b49325bc3b8456a89</anchor>
      <arglist>(key &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a9f9e6048e1ecbb416b7c8bb30aad079e</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a3fc45f4a8622e00caf04058289ad8e71</anchor>
      <arglist>(hash_type a_hash) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a9196938a84820d823181185188aca403</anchor>
      <arglist>(String &amp;&amp;a_string) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a3ae2cd6d3a03bdb4ce2bd5fda0000af9</anchor>
      <arglist>(const key &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a28fb9de8062baeb87497f07be768ff64</anchor>
      <arglist>(key &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a8611a24baaf84c8e30e296a36d6b850a</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>const hash_type &amp;</type>
      <name>hash</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a5454049d4ac182c2c098906468ecd60f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>name</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a9f700e2eb3fa5ba54951256343fc0e8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>aaa25d83bf932f15ebcd944644becfb15</anchor>
      <arglist>(const key &amp;a_lhs, const key &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a7eb14ef3be7bdb755f0651de6910cc16</anchor>
      <arglist>(const key &amp;a_lhs, const hash_type &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>ae2a3d7cc25c3cf17eb3bfe22cd67056a</anchor>
      <arglist>(const key &amp;a_lhs, const key &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>ac67464f99cbfc92bc4ff978ed1dbeea8</anchor>
      <arglist>(const key &amp;a_lhs, const hash_type &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>Hash</type>
      <name>hash_type</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a255165b9d25841e82d269f9104887120</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>key &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a2609f52bf1dedf5a30b523a7234ae61c</anchor>
      <arglist>(const key &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>key &amp;</type>
      <name>operator=</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a9ba7d57fae95506b49325bc3b8456a89</anchor>
      <arglist>(key &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a9f9e6048e1ecbb416b7c8bb30aad079e</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a3fc45f4a8622e00caf04058289ad8e71</anchor>
      <arglist>(hash_type a_hash) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a9196938a84820d823181185188aca403</anchor>
      <arglist>(String &amp;&amp;a_string) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a3ae2cd6d3a03bdb4ce2bd5fda0000af9</anchor>
      <arglist>(const key &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a28fb9de8062baeb87497f07be768ff64</anchor>
      <arglist>(key &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~key</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a8611a24baaf84c8e30e296a36d6b850a</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>const hash_type &amp;</type>
      <name>hash</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a5454049d4ac182c2c098906468ecd60f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string_view</type>
      <name>name</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a9f700e2eb3fa5ba54951256343fc0e8e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>aaa25d83bf932f15ebcd944644becfb15</anchor>
      <arglist>(const key &amp;a_lhs, const key &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>a7eb14ef3be7bdb755f0651de6910cc16</anchor>
      <arglist>(const key &amp;a_lhs, const hash_type &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>ae2a3d7cc25c3cf17eb3bfe22cd67056a</anchor>
      <arglist>(const key &amp;a_lhs, const key &amp;a_rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::strong_ordering</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>classbsa_1_1components_1_1key.html</anchorfile>
      <anchor>ac67464f99cbfc92bc4ff978ed1dbeea8</anchor>
      <arglist>(const key &amp;a_lhs, const hash_type &amp;a_rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::fo4::archive::meta_info</name>
    <filename>structbsa_1_1fo4_1_1archive_1_1meta__info.html</filename>
    <member kind="variable">
      <type>format</type>
      <name>format_</name>
      <anchorfile>structbsa_1_1fo4_1_1archive_1_1meta__info.html</anchorfile>
      <anchor>aee90612d799260da7846859ec6a0b875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>version</type>
      <name>version_</name>
      <anchorfile>structbsa_1_1fo4_1_1archive_1_1meta__info.html</anchorfile>
      <anchor>ad4125a5bfb2bd1e2b68f08de7891071c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_format</type>
      <name>compression_format_</name>
      <anchorfile>structbsa_1_1fo4_1_1archive_1_1meta__info.html</anchorfile>
      <anchor>a2bef59075c2dd58fc75d436f3b952e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>strings</name>
      <anchorfile>structbsa_1_1fo4_1_1archive_1_1meta__info.html</anchorfile>
      <anchor>aa4bffff63d67db04fe2310cf4981945c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::fo4::chunk::mips_t</name>
    <filename>structbsa_1_1fo4_1_1chunk_1_1mips__t.html</filename>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>first</name>
      <anchorfile>structbsa_1_1fo4_1_1chunk_1_1mips__t.html</anchorfile>
      <anchor>a06c1c1d3dd132f48ff63d0ef0ec00d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint16_t</type>
      <name>last</name>
      <anchorfile>structbsa_1_1fo4_1_1chunk_1_1mips__t.html</anchorfile>
      <anchor>a542b73d6505cf131b4b70b44347bee42</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1fo4_1_1chunk_1_1mips__t.html</anchorfile>
      <anchor>a2a6a6ecff043f142644147388e4ec19a</anchor>
      <arglist>(mips_t, mips_t) noexcept=default</arglist>
    </member>
    <member kind="friend">
      <type>friend constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structbsa_1_1fo4_1_1chunk_1_1mips__t.html</anchorfile>
      <anchor>a2a6a6ecff043f142644147388e4ec19a</anchor>
      <arglist>(mips_t, mips_t) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::fo4::file::read_params</name>
    <filename>structbsa_1_1fo4_1_1file_1_1read__params.html</filename>
    <member kind="variable">
      <type>format</type>
      <name>format_</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1read__params.html</anchorfile>
      <anchor>a724f83519370d002d3e04b77ff53fe38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>mip_chunk_width</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1read__params.html</anchorfile>
      <anchor>a7e07631e3982a51eb94277fa4eb1d654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>mip_chunk_height</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1read__params.html</anchorfile>
      <anchor>a0fe7319762f4d621dc8eede8ceb2d3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_format</type>
      <name>compression_format_</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1read__params.html</anchorfile>
      <anchor>a7afbfeb9846ad26fa5fdf510d3f65570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_level</type>
      <name>compression_level_</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1read__params.html</anchorfile>
      <anchor>a61aa97f0551d8362edbcb3eba8945a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_type</type>
      <name>compression_type_</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1read__params.html</anchorfile>
      <anchor>a999681989cf0c4dda3d660af4b17920f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::tes4::file::read_params</name>
    <filename>structbsa_1_1tes4_1_1file_1_1read__params.html</filename>
    <member kind="variable">
      <type>version</type>
      <name>version_</name>
      <anchorfile>structbsa_1_1tes4_1_1file_1_1read__params.html</anchorfile>
      <anchor>a4d79a52a00af31697c2f991c67d2cad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_codec</type>
      <name>compression_codec_</name>
      <anchorfile>structbsa_1_1tes4_1_1file_1_1read__params.html</anchorfile>
      <anchor>a5f478057393a215448135d3b3660a7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_type</type>
      <name>compression_type_</name>
      <anchorfile>structbsa_1_1tes4_1_1file_1_1read__params.html</anchorfile>
      <anchor>a1386ae1f7170596311526e2f04ecb0a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::read_source</name>
    <filename>classbsa_1_1read__source.html</filename>
    <member kind="function">
      <type></type>
      <name>read_source</name>
      <anchorfile>classbsa_1_1read__source.html</anchorfile>
      <anchor>a6ad7bf52aaf0a7f0d9926f61eb74bd39</anchor>
      <arglist>(std::filesystem::path a_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>read_source</name>
      <anchorfile>classbsa_1_1read__source.html</anchorfile>
      <anchor>a7438c7b97c54359e54623472423aaed4</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_src) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>read_source</name>
      <anchorfile>classbsa_1_1read__source.html</anchorfile>
      <anchor>a0682b7428242814219e3cd38d80598e4</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_src, copy_type a_copy) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::fo4::file::write_params</name>
    <filename>structbsa_1_1fo4_1_1file_1_1write__params.html</filename>
    <member kind="variable">
      <type>format</type>
      <name>format_</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1write__params.html</anchorfile>
      <anchor>a56d29f042cdd8c4c1bfed6e1edbc2bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_format</type>
      <name>compression_format_</name>
      <anchorfile>structbsa_1_1fo4_1_1file_1_1write__params.html</anchorfile>
      <anchor>acefd2d146ba95d84499dc8b1f51deead</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bsa::tes4::file::write_params</name>
    <filename>structbsa_1_1tes4_1_1file_1_1write__params.html</filename>
    <member kind="variable">
      <type>version</type>
      <name>version_</name>
      <anchorfile>structbsa_1_1tes4_1_1file_1_1write__params.html</anchorfile>
      <anchor>a891aa7aef7944e5bb416239a7575b1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>compression_codec</type>
      <name>compression_codec_</name>
      <anchorfile>structbsa_1_1tes4_1_1file_1_1write__params.html</anchorfile>
      <anchor>a5f56cd4a07b260fbb90712e8609ea800</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bsa::write_sink</name>
    <filename>classbsa_1_1write__sink.html</filename>
    <member kind="function">
      <type></type>
      <name>write_sink</name>
      <anchorfile>classbsa_1_1write__sink.html</anchorfile>
      <anchor>a390e2da390d6ec2c18b9121589982a25</anchor>
      <arglist>(std::filesystem::path a_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>write_sink</name>
      <anchorfile>classbsa_1_1write__sink.html</anchorfile>
      <anchor>ac9defb97b98f75d4987b82059c22e6d7</anchor>
      <arglist>(binary_io::any_ostream &amp;a_dst) noexcept</arglist>
    </member>
  </compound>
  <compound kind="concept">
    <name>bsa::concepts::stringable</name>
    <filename>conceptbsa_1_1concepts_1_1stringable.html</filename>
  </compound>
  <compound kind="namespace">
    <name>bsa</name>
    <filename>namespacebsa.html</filename>
    <namespace>bsa::components</namespace>
    <namespace>bsa::concepts</namespace>
    <namespace>bsa::fo4</namespace>
    <namespace>bsa::tes3</namespace>
    <namespace>bsa::tes4</namespace>
    <class kind="class">bsa::compression_error</class>
    <class kind="struct">bsa::doxygen_detail</class>
    <class kind="class">bsa::exception</class>
    <class kind="class">bsa::read_source</class>
    <class kind="class">bsa::write_sink</class>
    <member kind="enumeration">
      <type></type>
      <name>copy_type</name>
      <anchorfile>namespacebsa.html</anchorfile>
      <anchor>a7cd057d5499ea55cf49aac251d29a66c</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa.html" anchor="a7cd057d5499ea55cf49aac251d29a66ca6627415e807ee33c7302917216e7da68">deep</enumvalue>
      <enumvalue file="namespacebsa.html" anchor="a7cd057d5499ea55cf49aac251d29a66cae834955cdb1984d34b24c53ebe5bf211">shallow</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>compression_type</name>
      <anchorfile>namespacebsa.html</anchorfile>
      <anchor>aa43a2c59eaf218c9243f381be13d6709</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa.html" anchor="aa43a2c59eaf218c9243f381be13d6709ae61e8c6b8f8cc953006a03a056b97384">decompressed</enumvalue>
      <enumvalue file="namespacebsa.html" anchor="aa43a2c59eaf218c9243f381be13d6709a2b98a4ad988a18c42682f388901f2672">compressed</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>file_format</name>
      <anchorfile>namespacebsa.html</anchorfile>
      <anchor>aba3566ac42a66ab333e14d2365831c27</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa.html" anchor="aba3566ac42a66ab333e14d2365831c27a37a98352f0e0d2f4d64e96fe334871ed">tes3</enumvalue>
      <enumvalue file="namespacebsa.html" anchor="aba3566ac42a66ab333e14d2365831c27a27069e6baf4eba0ad33686287d582c97">tes4</enumvalue>
      <enumvalue file="namespacebsa.html" anchor="aba3566ac42a66ab333e14d2365831c27a87caba376d6bd426a47d310a1f0926bd">fo4</enumvalue>
    </member>
    <member kind="function">
      <type>std::optional&lt; file_format &gt;</type>
      <name>guess_file_format</name>
      <anchorfile>namespacebsa.html</anchorfile>
      <anchor>a13169fb4a56bf0a0f1758456883d15d0</anchor>
      <arglist>(std::filesystem::path a_path)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; file_format &gt;</type>
      <name>guess_file_format</name>
      <anchorfile>namespacebsa.html</anchorfile>
      <anchor>adbeb15881ed5d53559e87eff02fb8423</anchor>
      <arglist>(std::span&lt; const std::byte &gt; a_src)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::uint32_t</type>
      <name>make_four_cc</name>
      <anchorfile>namespacebsa.html</anchorfile>
      <anchor>a1da26d8e95d7874122280c1d239b8e09</anchor>
      <arglist>(std::string_view a_cc) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>bsa::components</name>
    <filename>namespacebsa_1_1components.html</filename>
    <class kind="class">bsa::components::basic_byte_container</class>
    <class kind="class">bsa::components::byte_container</class>
    <class kind="class">bsa::components::compressed_byte_container</class>
    <class kind="class">bsa::components::hashmap</class>
    <class kind="class">bsa::components::key</class>
    <member kind="typedef">
      <type>Hash(*)(std::string &amp;) noexcept</type>
      <name>hasher_t</name>
      <anchorfile>namespacebsa_1_1components.html</anchorfile>
      <anchor>ad74fb7e52fe738b2d5466d26d7934fae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>bsa::concepts</name>
    <filename>namespacebsa_1_1concepts.html</filename>
    <concept>bsa::concepts::stringable</concept>
  </compound>
  <compound kind="namespace">
    <name>bsa::fo4</name>
    <filename>namespacebsa_1_1fo4.html</filename>
    <namespace>bsa::fo4::hashing</namespace>
    <class kind="class">bsa::fo4::archive</class>
    <class kind="class">bsa::fo4::chunk</class>
    <class kind="class">bsa::fo4::file</class>
    <member kind="enumeration">
      <type></type>
      <name>format</name>
      <anchorfile>namespacebsa_1_1fo4.html</anchorfile>
      <anchor>af174c67d25a517d23a6abeda822b25ae</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="af174c67d25a517d23a6abeda822b25aea958153f1b8b96ec4c4eb2147429105d9">general</enumvalue>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="af174c67d25a517d23a6abeda822b25aeaa9fd6347608dab0c518e601b176cf896">directx</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>version</name>
      <anchorfile>namespacebsa_1_1fo4.html</anchorfile>
      <anchor>a9529b719ea8d0278ee33769cabe92e07</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a9529b719ea8d0278ee33769cabe92e07a6654c734ccab8f440ff0825eb443dc7f">v1</enumvalue>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a9529b719ea8d0278ee33769cabe92e07a1b267619c4812cc46ee281747884ca50">v2</enumvalue>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a9529b719ea8d0278ee33769cabe92e07a43a03299a3c3fed3d8ce7b820f3aca81">v3</enumvalue>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a9529b719ea8d0278ee33769cabe92e07ae6dd71377633723164aeea0750ddafa8">v7</enumvalue>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a9529b719ea8d0278ee33769cabe92e07ad387afe0fdfa6957d5cf6a66b49b8458">v8</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>compression_level</name>
      <anchorfile>namespacebsa_1_1fo4.html</anchorfile>
      <anchor>a48915841435efbdf0509dd3505912ca3</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a48915841435efbdf0509dd3505912ca3a87caba376d6bd426a47d310a1f0926bd">fo4</enumvalue>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a48915841435efbdf0509dd3505912ca3a67a56aac2aa52de95a726949a83b1a8a">fo76</enumvalue>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a48915841435efbdf0509dd3505912ca3ac05e7c9180003756a074f0a677e2a6e7">fo4_xbox</enumvalue>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a48915841435efbdf0509dd3505912ca3a60d31eb37595dd44584be5ef363283e3">sf</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>compression_format</name>
      <anchorfile>namespacebsa_1_1fo4.html</anchorfile>
      <anchor>a7cb4487a156f862d09ba9ed5a8dafb70</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a7cb4487a156f862d09ba9ed5a8dafb70aadcdbd79a8d84175c229b192aadc02f2">zip</enumvalue>
      <enumvalue file="namespacebsa_1_1fo4.html" anchor="a7cb4487a156f862d09ba9ed5a8dafb70afb14b6f9d7376218a1e1b7dfb1b58260">lz4</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>bsa::fo4::hashing</name>
    <filename>namespacebsa_1_1fo4_1_1hashing.html</filename>
    <class kind="struct">bsa::fo4::hashing::hash</class>
    <member kind="function">
      <type>hash</type>
      <name>hash_file_in_place</name>
      <anchorfile>namespacebsa_1_1fo4_1_1hashing.html</anchorfile>
      <anchor>adf61945311274425deabbf949572c9c6</anchor>
      <arglist>(std::string &amp;a_path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>hash</type>
      <name>hash_file</name>
      <anchorfile>namespacebsa_1_1fo4_1_1hashing.html</anchorfile>
      <anchor>a60f3e397f78788a2e015a02740d32a84</anchor>
      <arglist>(String &amp;&amp;a_path) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>bsa::tes3</name>
    <filename>namespacebsa_1_1tes3.html</filename>
    <namespace>bsa::tes3::hashing</namespace>
    <class kind="class">bsa::tes3::archive</class>
    <class kind="class">bsa::tes3::file</class>
  </compound>
  <compound kind="namespace">
    <name>bsa::tes3::hashing</name>
    <filename>namespacebsa_1_1tes3_1_1hashing.html</filename>
    <class kind="struct">bsa::tes3::hashing::hash</class>
    <member kind="function">
      <type>hash</type>
      <name>hash_file_in_place</name>
      <anchorfile>namespacebsa_1_1tes3_1_1hashing.html</anchorfile>
      <anchor>a2c7df3602d6ea9ee9c30dc65e496ab63</anchor>
      <arglist>(std::string &amp;a_path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>hash</type>
      <name>hash_file</name>
      <anchorfile>namespacebsa_1_1tes3_1_1hashing.html</anchorfile>
      <anchor>a1207229748a41731b21632c444436808</anchor>
      <arglist>(String &amp;&amp;a_path) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>bsa::tes4</name>
    <filename>namespacebsa_1_1tes4.html</filename>
    <namespace>bsa::tes4::hashing</namespace>
    <class kind="class">bsa::tes4::archive</class>
    <class kind="class">bsa::tes4::directory</class>
    <class kind="class">bsa::tes4::file</class>
    <member kind="enumeration">
      <type></type>
      <name>archive_flag</name>
      <anchorfile>namespacebsa_1_1tes4.html</anchorfile>
      <anchor>a929dbf32826a657e850c6c563e47347b</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347ba334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347baa7dc9140432a962a83524e4206abf256">directory_strings</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347ba481811567b0b34aee94c54a3473c6adc">file_strings</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347ba2b98a4ad988a18c42682f388901f2672">compressed</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347baa9a41705977069b26d7e30dc2501d8b9">retain_directory_names</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347bad28bc7ccc5087c8c47d5d2c1f31403a7">retain_file_names</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347ba6d061ee081309ebce673951e4468775e">retain_file_name_offsets</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347ba349e12e1da168ba0f0651fcc8120d3b8">xbox_archive</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347bae82e4eb0d7802c56696a8d6689609793">retain_strings_during_startup</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347bafe3ff6f81e61f998602d0b1c66c7b944">embedded_file_names</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a929dbf32826a657e850c6c563e47347ba08678295c8b2e35e4b32058998bd859e">xbox_compressed</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>archive_type</name>
      <anchorfile>namespacebsa_1_1tes4.html</anchorfile>
      <anchor>ae0c17a039f112258e48dc29f4582ed39</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39a334c4a4c42fdb79d7ebc3e73b517e6f8">none</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39a1541efdcede8c5a0c2ed7e32c89b361f">meshes</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39ac5e62798e528da9080811018cbb27cd3">textures</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39a81ca0b7c951be89184c130d2860a5b00">menus</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39aad1588d76517dd34c49c3f901bce7fcf">sounds</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39aac163f065d2b3ecd5fc2f8e6365b367e">voices</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39a1aa355706e1767666124331a716c7890">shaders</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39a2d5563ed288ac5396add9b78fbca810b">trees</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39a980d14c0c85495b48b9a9134658e6121">fonts</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="ae0c17a039f112258e48dc29f4582ed39abc957e26ff41470c556ee5d09e96880b">misc</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>compression_codec</name>
      <anchorfile>namespacebsa_1_1tes4.html</anchorfile>
      <anchor>a63a2eb1a179e7b8da6cf20270da5b124</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a63a2eb1a179e7b8da6cf20270da5b124afea087517c26fadd409bd4b9dc642555">normal</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a63a2eb1a179e7b8da6cf20270da5b124a8edbb3efc79bd72cc7c986e1470497e2">xmem</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>version</name>
      <anchorfile>namespacebsa_1_1tes4.html</anchorfile>
      <anchor>a80407ad9bc5b93ad43225b2bb9f5100c</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a80407ad9bc5b93ad43225b2bb9f5100ca27069e6baf4eba0ad33686287d582c97">tes4</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a80407ad9bc5b93ad43225b2bb9f5100ca9251dddd50ef30adce51ad629526d447">fo3</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a80407ad9bc5b93ad43225b2bb9f5100cad5f51a6b3d05a2651e100f6a985ae930">fnv</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a80407ad9bc5b93ad43225b2bb9f5100ca305506069f2dda79d68e638186b83a5e">tes5</enumvalue>
      <enumvalue file="namespacebsa_1_1tes4.html" anchor="a80407ad9bc5b93ad43225b2bb9f5100ca64192ca465194480a4621d6905dac5b7">sse</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>bsa::tes4::hashing</name>
    <filename>namespacebsa_1_1tes4_1_1hashing.html</filename>
    <class kind="struct">bsa::tes4::hashing::hash</class>
    <member kind="function">
      <type>hash</type>
      <name>hash_directory_in_place</name>
      <anchorfile>namespacebsa_1_1tes4_1_1hashing.html</anchorfile>
      <anchor>a6f983e9098b662e4a17da319d88aa0ba</anchor>
      <arglist>(std::string &amp;a_path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>hash</type>
      <name>hash_directory</name>
      <anchorfile>namespacebsa_1_1tes4_1_1hashing.html</anchorfile>
      <anchor>ac23e1c63e370ff2f9c3fa941193ea905</anchor>
      <arglist>(String &amp;&amp;a_path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>hash</type>
      <name>hash_file_in_place</name>
      <anchorfile>namespacebsa_1_1tes4_1_1hashing.html</anchorfile>
      <anchor>ab6991373262d3fb67cc09a211cd73545</anchor>
      <arglist>(std::string &amp;a_path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>hash</type>
      <name>hash_file</name>
      <anchorfile>namespacebsa_1_1tes4_1_1hashing.html</anchorfile>
      <anchor>ace7980253bd0d54707c9b050fbe60814</anchor>
      <arglist>(String &amp;&amp;a_path) noexcept</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>bsa</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Overview">overview</docanchor>
    <docanchor file="index.html" title="What is a BSA?">what</docanchor>
    <docanchor file="index.html" title="Why bsa?">why</docanchor>
    <docanchor file="index.html" title="It&apos;s written in contemporary C++">why-cxx</docanchor>
    <docanchor file="index.html" title="It&apos;s actively tested">why-testing</docanchor>
    <docanchor file="index.html" title="It&apos;s low overhead">why-low-overhead</docanchor>
    <docanchor file="index.html" title="It&apos;s low level">why-low-level</docanchor>
    <docanchor file="index.html" title="Examples">examples</docanchor>
    <docanchor file="index.html" title="Reading">examples-reading</docanchor>
    <docanchor file="index.html" title="Writing">examples-writing</docanchor>
    <docanchor file="index.html" title="CMake Options">cmake-options</docanchor>
    <docanchor file="index.html" title="Integration">integration</docanchor>
    <docanchor file="index.html" title="XMem Codec">xmem-codec</docanchor>
    <docanchor file="index.html" title="Important Notes">important-notes</docanchor>
    <docanchor file="index.html" title="Dependencies">dependencies</docanchor>
    <docanchor file="index.html" title="Consumption">dependencies-consumption</docanchor>
    <docanchor file="index.html" title="XMem Codec Support">dependencies-xmem</docanchor>
    <docanchor file="index.html" title="Development">dependencies-development</docanchor>
    <docanchor file="index.html" title="Alternatives">alternatives</docanchor>
  </compound>
</tagfile>
